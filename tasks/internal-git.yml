- name: create a list of db names
  set_fact:
    canonical_db_names:
      - "{{ canonical_cms_db_name }}"
      - "{{ canonical_crm_db_name }}"
      - "{{ canonical_crm_logging_db_name | default(canonical_crm_db_name, true) }}"
    db_names:
      - "{{ cms_db_name }}"
      - "{{ crm_db_name }}"
      - "{{ crm_logging_db_name | default(crm_db_name, true) }}"

- name: create a list of unique db names
  set_fact:
    canonical_db_names_unique: "{{ canonical_db_names | unique }}"
    db_names_unique: "{{ db_names | unique }}"

- name: clone an existing site
  git:
    repo: "{{ git_repo_url }}"
    dest: "{{ gitroot }}"
    version: master
    umask: "0007"
    track_submodules: no
  become_user: "{{ run_as_user }}"

- name: set an HTTP git push URL
  git_config:
    name: remote.origin.pushurl
    value: "{{ git_repo_push_url }}"
    scope: local
    repo: "{{ gitroot }}"
  become_user: "{{ run_as_user }}"
  when: (env == 'Test' or env == 'Live') and git_repo_name is not none

- name: Composer install (D8)
  composer:
    command: install
    working_dir: "{{ gitroot }}"
  when: cms == "Drupal8"
  become_user: "{{ run_as_user }}"

- name: Create CiviCRM uploads folder
  file:
    path: "{{ civicrm_settings_php_path }}"
    state: directory
  when: civicrm == 'Yes'
  become_user: "{{ run_as_user }}"

# MySQL restore
- name: Create sql-dumps folder
  file:
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    path: "{{ webroot }}/../sql-dumps"
    state: directory
    mode: 02770
  become_user: root

- name: Check if db dump files already exist
  stat:
    path: "{{ webroot }}/../sql-dumps/{{ canonical_cms_db_name }}.sql"
  register: db_dump

# Return yes when we FAIL the assertion, meaning "restore a db backup".
- name: Update the dump if a canonical db exists unless a dump already exists and is < 24hrs old
  assert:
    that:
      - "canonical_hostname is none or (db_dump.stat.exists == true and (ansible_date_time.epoch|int - db_dump.stat.mtime) < (60 * 60 * 24))"
    msg: "yes"
  failed_when: false
  register: restore_db_backup

# This is so fucking ugly. Newer versions of borgbackup eliminate the need for piping to tail and cut, but we probably won't have them until Debian 10 ships.
- name: Get the latest backup archive name
  shell: borg list --remote-path /usr/local/bin/borg1/borg1 {{ rsyncnet_user }}@{{ rsyncnet_server }}:{{ canonical_server_client + '-' + canonical_hostname }} | tail -n1 | cut -f 1 -d ' '
  environment:
    BORG_PASSPHRASE: "{{ lookup('passwordstore', canonical_server_client + '/' + canonical_hostname + '/borg/remote') }}"
  args:
    chdir: "{{ webroot }}/../sql-dumps"
  register: archive_name
  changed_when: false
  when: restore_db_backup.msg == "yes"
  become_user: root

# Download the borg backup of the db dump if we need an update and the borg backup exists.
- name: Download the latest copy of the database
  shell: borg extract --strip-components 4 --remote-path /usr/local/bin/borg1/borg1 {{ rsyncnet_user }}@{{ rsyncnet_server }}:{{ canonical_server_client + '-' + canonical_hostname }}::{{ archive_name.stdout }} var/backups/mysql/sqldump/{{ db_name }}.sql.gz
  args:
    chdir: "{{ webroot }}/../sql-dumps"
  environment:
    BORG_PASSPHRASE: "{{ lookup('passwordstore', canonical_server_client + '/' + canonical_hostname + '/borg/remote') }}"
  with_items: "{{ canonical_db_names_unique }}"
  register: db_downloaded
  loop_control:
    loop_var: db_name
  when: restore_db_backup.msg == "yes" and archive_name.skipped is not defined
  become_user: root

- name: Decompress the db backups
  shell: gunzip --force {{ item }}.sql.gz
  args:
    chdir: "{{ webroot }}/../sql-dumps"
  with_items: "{{ canonical_db_names_unique }}"
  when: restore_db_backup.msg == "yes" and archive_name.skipped is not defined
  become_user: root

# Don't do these other steps if a) there's no db backup in borg b) the db is already downloaded.
# FIXME: We don't have a way of telling whether the db dump has been loaded or not, which is what we really need.  Figure out a command to determine that, then change the "when" on the next 3 tasks.
- name: Remove definers from Civi db
  command: perl -pi -e 's#\/\*\!5001. DEFINER=`.*`@`.*?\*\/##g' {{ canonical_crm_db_name }}.sql
  args:
    chdir: "{{ webroot }}/../sql-dumps"
  when: restore_db_backup.msg == "yes" and archive_name.skipped is not defined
  become_user: root

- name: Fix logging db triggers when using a separate db
  command: perl -pi -e 's/{{ canonical_crm_logging_db_name }}/{{ crm_logging_db_name }}/g' {{ canonical_crm_db_name }}.sql
  args:
    chdir: "{{ webroot }}/../sql-dumps"
  when: restore_db_backup.msg == "yes" and archive_name.skipped is not defined and canonical_crm_logging_db_name is not none
  become_user: root

- name: Import the databases
  mysql_db:
    name: "{{ item.1 }}"
    target: "{{ webroot}}/../sql-dumps/{{ item.0 }}.sql"
    state: import
    login_user: "{{ db_user }}"
    login_password: "{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }}"
  when: restore_db_backup.msg == "yes" and archive_name.skipped is not defined and civicrm == 'Yes' and item.1 is defined
  become_user: root
  with_together:
   - "{{ canonical_db_names_unique }}"
   - "{{ db_names_unique }}"

- name: Add civicrm.settings.php
  template:
    src: templates/civicrm.settings.j2
    dest: "{{ civicrm_settings_php_path }}/civicrm.settings.php"
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    mode: 0660
  become_user: root
  when: civicrm == 'Yes'

- name: Get table names for Views integration
  command: "mysql -u{{ db_user }} -p{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }} {{ crm_db_name }} --skip-column-names --silent -e 'show tables'"
  register: civi_table_names
  when: (cms == 'Drupal' or cms == 'Backdrop') and civicrm == 'Yes'
  changed_when: false

#TODO: Create a settings template for Backdrop
#TODO: Create the config folders for Backdrop with appropriate owner/perms
# config/active, config/staging, both owned/writable by run_as_user

- name: Add settings.php
  template:
    src: templates/{{ cms }}-settings.j2
    dest: "{{ webroot }}/sites/default/settings.php"
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
  when: cms == 'Drupal' or cms == 'Drupal8' or cms == 'Backdrop'

- name: Create wp-config.php
  shell: |
    wp config create --dbname={{ cms_db_name }} --dbuser={{ db_user }} --dbpass={{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }} {% if cms_table_prefix|default('blank', True) != 'blank' %}--dbprefix={{ cms_table_prefix}}{% endif %} --path={{ webroot }} --extra-php <<PHP
    define( 'WP_SITEURL', '{{ primary_url }}' );
  args:
    creates: "{{ webroot }}/wp-config.php"
  when: cms == 'WordPress'
  become_user: "{{ run_as_user }}"

- name: Do a search/replace for the primary URL
  command: "wp search-replace {{ canonical_primary_url }} {{ primary_url }}"
  args:
    chdir: "{{ webroot }}"
  when: cms == 'WordPress' and canonical_primary_url
  become_user: "{{ run_as_user }}"

- name: Set group write permissions on CiviCRM folders
  file:
    path: "{{ civicrm_files_path }}"
    state: directory
    mode: g+w
    recurse: yes
  become_user: root
  when: civicrm == 'Yes'

- name: Fix wpLoadPhp on copied databases
  command: "wp cv api setting.create wpLoadPhp={{ webroot }}/wp-load.php"
  args:
    chdir: "{{ webroot }}"
  when: cms == 'WordPress' and restore_db_backup.msg == "yes" and archive_name.skipped is not defined
  become_user: "{{ run_as_user }}"
