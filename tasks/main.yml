---
- name: Update MFPL DNS
  local_action: command php "{{ inventory_dir }}/helpers/mfplapi.php" "{{ item.key }}" "{{ ansible_host }}"
  register: dnshelper_result
  #In theory, a better approach is to do a DNS lookup and see if I know how to control that nameserver.
  when: item.key is search("megaphonetech.com")
  changed_when: "dnshelper_result.stdout != 'DNS already exists and is correct.'"
  with_dict: "{{ sites }}"
  become: no
  loop_control:
    label: "{{ item.key }}"

- name: Create the run_as_user
  user:
    name: "{{ item.value.run_as_user }}"
    shell: /bin/nologin
    generate_ssh_key: yes
    home: "/home/{{ item.value.run_as_user }}"
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Get users to add to the new group
  set_fact:
    userlist: "{{ userlist|default([]) + [ item.value.name ] + [ ansible_user ] }}"
  with_dict: "{{ users }}"

- name: Get list of groups to add to users
  set_fact:
    grouplist: "{{ grouplist|default([]) + [ item.value.run_as_user ] }}"
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Add Megaphone staff to the newly-created group
  user:
    name: "{{ item[0] }}"
    append: yes
    groups:
      - "{{ item[1] }}"
  with_nested:
    - "{{ userlist }}"
    - "{{ grouplist }}"

- name: Create a php-fpm pool
  template:
    src: templates/php-pool.j2
    dest: /etc/php/{{ php_version }}/fpm/pool.d/{{ item.value.run_as_user }}.conf
  with_dict: "{{ sites }}"
  notify: restart php-fpm
  loop_control:
    label: "{{ item.key }}"


- name: Create vhost conf (Apache)
  template:
    src: templates/vhost.conf.j2
    dest: /etc/apache2/sites-available/{{ item.key }}.conf
  with_dict: "{{ sites }}"
  notify: restart apache
  loop_control:
    label: "{{ item.key }}"

- name: Enable the site (Apache)
  file:
    src: /etc/apache2/sites-available/{{ item.key }}.conf
    dest: /etc/apache2/sites-enabled/{{ item.key }}.conf
    state: link
  with_dict: "{{ sites }}"
  notify: restart apache
  loop_control:
    label: "{{ item.key }}"

- name: Update /etc/hosts
  lineinfile:
    path: /etc/hosts
    regexp: "^127\\.0\\.0\\.1 {{ item.value.bare_url }}"
    line: "127.0.0.1 {{ item.value.bare_url }}"
  become_user: root
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Check if repos exist on gogs - create if not
  uri:
    url: https://git.megaphonetech.com/api/v1/org/{{ item.value.git_repo_owner }}/repos
    method: POST
    headers:
      Authorization: token {{ lookup('passwordstore', 'megaphone/gogs/api') }}
    body:
      name: "{{ item.value.git_repo_name }}"
      description: "Repo for {{ item.value.git_repo_name }}"
      private: true
    body_format: json
  with_dict: "{{ sites }}"
  register: create_gogs_repo
  failed_when: not(create_gogs_repo.status == 201 or create_gogs_repo.status == 422 or create_gogs_repo.status == 403)
  when: item.value.internal_repo == '1'
  loop_control:
    label: "{{ item.key }}"
  tags: debug

- name: Check if branches exist - if not, this repo is empty
  uri:
    url: https://git.megaphonetech.com/api/v1/repos/{{ item.value.git_repo_owner }}/{{ item.value.git_repo_name }}/branches
    method: GET
    headers:
      Authorization: token {{ lookup('passwordstore', 'megaphone/gogs/api') }}
    body:
      name: "{{ item.value.git_repo_name }}"
      description: "Repo for {{ item.value.git_repo_name }}"
      private: true
    body_format: json
  when: item.value.internal_repo == '1'
  with_dict: "{{ sites }}"
  register: repos
  loop_control:
    label: "{{ item.key }}"
  tags: debug

- name: deleteme2
  debug: var=item.item.value.internal_repo
  with_items: "{{ repos.results }}"
  tags: debug


# Tasks for blank sites regardless of CMS
- name: Create deploy keys
  include_tasks: deploy-keys.yml
  with_items: "{{ create_gogs_repo.results }}"
  loop_control:
    label: "{{ item.item.key }}"

- name: Create the folder hierarchy
  file:
    path: "{{ item.value.gitroot }}"
    state: directory
    mode: 02770
    owner: "{{ item.value.run_as_user }}"
    group: "{{ item.value.run_as_user }}"
  become_user: root
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Grant www-data user access to the parent folder
  acl:
    path: "{{ item.value.webroot }}/.."
    entity: www-data
    etype: user
    permissions: rx
    state: present
  become_user: root
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"


- name: Grant www-data user access to the webroot
  acl:
    path: "{{ item.value.webroot }}"
    entity: www-data
    etype: user
    permissions: rx
    recursive: yes
    default: yes
    state: present
  become_user: root
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

#https://github.com/ansible/ansible/issues/26796
- name: Deal with the Ansible ACL bug
  command: setfacl -R -m user:www-data:rx,d:user:www-data:rx "{{ item.value.webroot }}"
  changed_when: false
  become_user: root
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"


# MySQL
- name: Create CMS database
  mysql_db:
    name: "{{ item.value.cms_db_name }}"
    state: present
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create CRM database
  mysql_db:
    name: "{{ item.value.crm_db_name }}"
    state: present
  when: item.value.civicrm == 'Yes'
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create MySQL User and set db permissions
  mysql_user:
    name: "{{ item.value.db_user }}"
    password: "{{ lookup('passwordstore', item.value.client + '/' + hostname + '/' + item.value.bare_url + '/mysql create=true length=32') }}"
    priv: "{{ item.value.cms_db_name }}.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,LOCK TABLES,CREATE TEMPORARY TABLES,CREATE VIEW/{{ item.value.crm_db_name }}.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,LOCK TABLES,CREATE TEMPORARY TABLES,TRIGGER,CREATE ROUTINE,ALTER ROUTINE,CREATE VIEW,SHOW VIEW,REFERENCES{% if item.value.crm_logging_db_name|default('blank', True) != 'blank' %}/{{ item.value.crm_logging_db_name }}.*:SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX,ALTER,LOCK TABLES,CREATE TEMPORARY TABLES,TRIGGER,CREATE ROUTINE,ALTER ROUTINE,CREATE VIEW,REFERENCES{% endif %}"
    host: 'localhost'
    state: present
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Set file owner
  file:
    dest: "{{ item.value.webroot }}"
    owner: "{{ item.value.run_as_user }}"
    group: "{{ item.value.run_as_user }}"
    recurse: yes
  become_user: root
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"

- name: Create a site key if one doesn't exist.
  set_fact: dontcare="{{ lookup('passwordstore', item.item.value.client + '/' + hostname + '/' + item.item.value.bare_url + '/sitekey create=true length=32 chars=ascii_letters,digits') }}"
  with_items: "{{ create_gogs_repo.results }}"
  loop_control:
    label: "{{ item.item.key }}"

# If repos.item.json is > 0, then branches exist in the gitea repo.
# Build a new WP site
- name: Create fresh WordPress sites
  include_tasks: blank-wp.yml
  with_items: "{{ repos.results }}"
  when: ( item.item.value.internal_repo != "1" or item.json | length == 0) and item.item.value.cms == 'WordPress'
  loop_control:
    label: "{{ item.item.key }}"

# Build a new D7 site
- name: Create fresh Drupal 7 sites
  include_tasks: blank-drupal7.yml
  with_items: "{{ repos.results }}"
  when: ( item.item.value.internal_repo != "1" or item.json | length == 0) and item.item.value.cms == 'Drupal'
  loop_control:
    label: "{{ item.item.key }}"

# Tasks for blank sites regardless of CMS
- name: Tasks for all fresh sites
  include_tasks: blank-site.yml
  with_items: "{{ repos.results }}"
  when: ( item.item.value.internal_repo != "1" or item.json | length == 0)
  loop_control:
    label: "{{ item.item.key }}"

# For internal (git.megaphonetech.com) repos
- name: Build sites from existing git repo
  include_tasks: internal-git.yml
  with_items: "{{ repos.results }}"
  when: (item.item.value.internal_repo == "1" and item.json | length > 0)
  loop_control:
    label: "{{ item.item.key }}"

# All Drupal sites
- name: Drupal tasks
  include_tasks: drupal7.yml
  with_items: "{{ create_gogs_repo.results }}"
  when: item.item.value.cms == 'Drupal'
  loop_control:
    label: "{{ item.item.key }}"

# Normally this happens on login, but we need to do it now for API key purposes
- name: Create a CiviCRM contact for the admin user
  shell: echo '{"contact_type":"Individual", "display_name":"{{ monitoring_email }}","api_key":"'{{ lookup('passwordstore', item.value.client + '/' + hostname + '/' + item.value.bare_url + '/apikey create=true length=32') }}'","email":"{{ monitoring_email }}","options":{"match":"email"}}' | cv api contact.create --in=json
  args:
    chdir: "{{ item.value.webroot }}"
  become_user: "{{ item.value.run_as_user }}"
  with_dict: "{{ sites }}"
  loop_control:
    label: "{{ item.key }}"
