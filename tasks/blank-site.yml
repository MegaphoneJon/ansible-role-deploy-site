- name: Check out civicrm-setup
  git:
    repo: https://github.com/civicrm/civicrm-setup
    dest: /opt/civicrm-setup
  become_user: root
  when: civicrm == 'Yes'

- name: Create CiviCRM folder
  file:
    path: "{{ civiroot }}"
    state: directory
  when: civicrm == 'Yes'
  become_user: "{{ run_as_user }}"

- name: Create CiviCRM uploads folder
  file:
    path: "{{ civicrm_settings_php_path }}"
    state: directory
  when: civicrm == 'Yes'
  become_user: "{{ run_as_user }}"

- name: Create CiviCRM extensions/templates/php folder.
  file:
    path: "{{ webroot }}/{{ filepath }}"
    state: directory
  loop_control:
    loop_var: filepath
  with_items:
    - "{{ civicrm_custom_path }}"
    - "{{ civicrm_custom_path }}/templates"
    - "{{ civicrm_custom_path }}/extensions"
  when: civicrm == 'Yes'
  become_user: "{{ run_as_user }}"

- name: Set file permissions
  file:
    dest: "{{ webroot }}"
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    recurse: yes
    mode: ug=rwX
  become_user: root

- name: Run cv core:install
  command: "cv -n core:install --db=mysql://{{ db_user }}:{{ lookup('passwordstore', client + '/' + hostname + '/' + bare_url + '/mysql') }}@localhost/{{ crm_db_name }} --cms-base-url={{ primary_url }}"
  args:
    chdir: "{{ civiroot }}"
    creates: "{{ civicrm_settings_php_path }}/civicrm.settings.php"
  when: civicrm == 'Yes'
  become_user: "{{ run_as_user }}"

# This one contains any customizations we might want, like extensions directory.
- name: Add civicrm.settings.php
  template:
    src: templates/civicrm.settings.j2
    dest: "{{ civicrm_settings_php_path }}/civicrm.settings.php"
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    mode: 0660
  when: civicrm == 'Yes'
  become_user: root

- name: git init
  command:  git init {{ webroot }}
  args:
    creates: "{{ webroot }}/.git"
  become_user: "{{ run_as_user }}"

- name: set git name
  git_config:
    name: user.name
    repo: "{{ webroot }}"
    scope: global
    value: "{{ run_as_user }} on {{ inventory_hostname }}"
  become_user: "{{ run_as_user }}"

- name: set git email
  git_config:
    name: user.email
    repo: "{{ webroot }}"
    scope: global
    value: 'none@megaphonetech.com'
  become_user: "{{ run_as_user }}"

- name: git add
  command: git add -A
  args:
    chdir: "{{ webroot }}"
  register: add_result
  changed_when: add_result.stdout != ''
  become_user: "{{ run_as_user }}"

- name: git commit
  command: git commit -m "Initial commit (via Ansible)"
  args:
    chdir: "{{ webroot }}"
  register: commit_result
  changed_when: commit_result.rc == 0
  failed_when: 'commit_result.rc != 0 and not "nothing to commit, working tree clean" in commit_result.stdout_lines'
  become_user: "{{ run_as_user }}"

- name: Add Megaphone monitoring
  command: "git submodule add https://github.com/MegaphoneJon/com.megaphonetech.monitoring.git {{ civicrm_custom_path }}/extensions/com.megaphonetech.monitoring"
  args:
    chdir: "{{ webroot }}"
    creates: "{{ civicrm_custom_path }}/extensions/com.megaphonetech.monitoring"
  when: civicrm == 'Yes'
  become_user: "{{ run_as_user }}"

- name: ignore file perms on Megaphone monitoring
  git_config:
    name: core.filemode
    scope: local
    repo: "{{ webroot }}/{{ civicrm_custom_path }}/extensions/com.megaphonetech.monitoring"
    value: 'false'
  when: civicrm == 'Yes'

# it seems like running git commands in Ansible is buggy, leads to files being owned by root.
- name: Set file permissions (again)
  file:
    dest: "{{ webroot }}"
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    recurse: yes
    mode: ug=rwX
  become_user: root

- name: fix git permissions
  file:
    dest: "{{ webroot }}/.git"
    owner: "{{ run_as_user }}"
    group: "{{ run_as_user }}"
    recurse: yes
    mode: ug=rwX
  become_user: root

- name: git add
  command: git add -A
  args:
    chdir: "{{ webroot }}"
  register: add_result
  changed_when: add_result.stdout != ''
  become_user: "{{ run_as_user }}"

- name: git commit
  command: git commit -m "Megaphone monitoring extension (via Ansible)"
  args:
    chdir: "{{ webroot }}"
  register: commit_result
  changed_when: commit_result.rc == 0
  failed_when: 'commit_result.rc != 0 and not "nothing to commit, working tree clean" in commit_result.stdout_lines'
  become_user: "{{ run_as_user }}"

- name: git push
  command: git push --set-upstream origin master
  args:
    chdir: "{{ webroot }}"
  register: push_result
  when: internal_repo == "1" and (git_repo_push_url is search("ssh://"))
  changed_when: push_result.rc == 0
  failed_when: not(push_result.rc == 0)
  become_user: "{{ run_as_user }}"
